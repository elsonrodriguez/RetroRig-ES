#!/bin/bash
#
# RetroRig helper modules
# This is a small script to copy over configuration files for emulators
# append a "-x" on the end above for debugging if need be
# Please report any errors via a pull request
# You can also reach me on twitter: @N3RD42
#

h_ps3_blu_check()
{

	if [ -z 'grep "PLAYSTATION(R)3" "/proc/bus/input/devices"' ]; then
		# not set, echo below fore TESTING ONLY!!!
		# set ps3_blu_complete to 0 for false
		dialog --infobox "Your controller is still turned on!" 3 39
		ps3_blu_complete="0"	
		sleep 2s
	else
		# Let user know pairing is complete
		dialog --infobox "Pairing on controller via bluetooth complete" 3 48
		sleep 2s
		# set ps3_blu_complete to 1 for true
		ps3_blu_complete="1"	
		sleep 2s
	fi
}

h_clean_gamepad()
{
	clear
	# The purpose of this function is to clean any specific configs that may 
	# have altered files you would need for changing your gamepad type

	# system objects that may interfere with switching gamepads
	# The rescan service should be able to coexist with xboxdrv
	
	# qjoypad (deprecated)
	rm -f "$home/.config/autostart/qjoypad.desktop"

	# Antimicro
	rm -f "$config_home/.config/antimicro*"

	# Emulation Station configs
	rm -f "$es_home/es_systems.cfg"
	rm -f "$es_home/es_settings.cfg"
	rm -f "$es_home/es_input.cfg"

	# Retroarch
	rm -rf "$config_home/.config/retroarch/retroarch.cfg"
	rm -rf "$config_home/.config/retroarch/retroarch-desmume.cfg"
	
	# remove the /usr/share/applications/gp_autodetect_xbmc.sh file, so we can actively
	# set the gamepad type on changes from user input in the script gamepad select
	# THE LINE BELOW MUST* STAY COMMENTED OUT UNTIL THE "NEW" REVISIONS ARE MADE AND TESTED SUCCESSFULLY
	# rm -f "/usr/share/applications/gp_autodetect_xbmc.sh"

	# Xbox controller 
	$cmd_xboxdrv_stop
	rm -f /etc/init.d/xboxdrv
	rm -f /etc/default/xboxdrv

	# PS3 controller
	$cmd_sixad_stop

	# clean init scripts (rescan service shouldn't need cleaned right now)
	# If it is required later, it will fall here.
	$cmd_remove_xboxdrv

	# XBMC
	rm -f "$xbmc_home/userdata/keymaps/keyboard.xml"

	##########################################
	# Backup BIOS changes user has made
	##########################################
	# Needed for: PCSX2, Gens GS

	# Gens GS
	if [ -f "$config_home/.gens/gens.cfg" ]; then
		orig_bios_gens_68=$(grep "32X 68000 BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_32m=$(grep "32X Master SH2 BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_32s=$(grep "32X Slave SH2 BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_e=$(grep "Europe CD BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_g=$(grep "Genesis BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_j=$(grep "Japan CD BIOS=" "$config_home/.gens/gens.cfg")
		orig_bios_gens_u=$(grep "USA CD BIOS=" "$config_home/.gens/gens.cfg")
	fi

	# PCSX2
	if [ -f "$config_home/.config/pcsx2/inis/PCSX2_ui.ini" ]; then
		orig_bios_pcsx2=$(grep "BIOS=" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini")
	fi

}


function h_restore_bios_cfg() 
{
	
	#######################
	# grab current sets:
	#######################

	# Gens
	if [ -f "$config_home/.gens/gens.cfg" ]; then
		bios_gens_68=$(grep "32X 68000 BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_32m=$(grep "32X Master SH2 BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_32s=$(grep "32X Slave SH2 BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_e=$(grep "Europe CD BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_g=$(grep "Genesis BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_j=$(grep "Japan CD BIOS=" "$config_home/.gens/gens.cfg")
		bios_gens_u=$(grep "USA CD BIOS=" "$config_home/.gens/gens.cfg")
	fi

	# PCSX2
	if [ -f "$config_home/.config/pcsx2/inis/PCSX2_ui.ini" ]; then
		bios_pcsx2=$(grep "BIOS=" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini")
	fi

	###################################################
	# Restore afflicted BIOS configuration lines 
	###################################################

	# Gens GS
	if [ -n "$bios_gens_68" ]; then
		if [ -n "$orig_bios_gens_68" ]; then
			sed -i "s|$bios_gens_68|$orig_bios_gens_68|g" "$config_home/.gens/gens.cfg"
		fi
	fi
	
	if [ -n "$bios_gens_32m" ]; then
		if [ -n "$orig_bios_gens_32m" ]; then
			sed -i "s|$bios_gens_32m|$orig_bios_gens_32m|g" "$config_home/.gens/gens.cfg"
		fi
	fi
			
	if [ -n "$bios_gens_32s" ]; then
		if [ -n "$orig_bios_gens_32s" ]; then
			sed -i "s|$bios_gens_32s|$orig_bios_gens_32s|g" "$config_home/.gens/gens.cfg"
		fi
	fi
			
	if [ -n "$bios_gens_e" ]; then
		if [ -n "$orig_bios_gens_e" ]; then
			sed -i "s|$bios_gens_e|$orig_bios_gens_e|g" "$config_home/.gens/gens.cfg"
		fi
	fi
			
	if [ -n "$bios_gens_g" ]; then
		if [ -n "$orig_bios_gens_g" ]; then
			sed -i "s|$bios_gens_g|$orig_bios_gens_g|g" "$config_home/.gens/gens.cfg"
		fi
	fi
			
	if [ -n "$bios_gens_j" ]; then
		if [ -n "$orig_bios_gens_j" ]; then
			sed -i "s|$bios_gens_j|$orig_bios_gens_j|g" "$config_home/.gens/gens.cfg"
		fi
	fi
			
	if [ -n "$bios_gens_u" ]; then
		if [ -n "$orig_bios_gens_u" ]; then
			sed -i "s|$bios_gens_u|$orig_bios_gens_u|g" "$config_home/.gens/gens.cfg"
		fi
	fi
	
	# PCSX2
	if [ -f "$config_home/.config/pcsx2/inis/PCSX2_ui.ini" ]; then
		
		# if former entry exists
		if [ -n "$orig_bios_pcsx2" ]; then
			
			#if new file contains "BIOS" entry (should actually nor be the case)
			if [ -n "$bios_pcsx2" ]; then
				
				sed -i "s|$bios_pcsx2|$orig_bios_pcsx2|g" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"
				echo "BIOS entry inserted"
				
			else
				# usually a fresh ini file does not contain a BIOS line
				echo "$orig_bios_pcsx2" >> "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"
				echo "BIOS entry appended"
				
			fi
			
			echo "former BIOS entry for pcsx2 restored"
			
		else
			 #former entry does not exist, using default
			 orig_bios_pcsx2="BIOS=$rootdir/BIOS/PCSX2/SCPH-77001_USA_Con_0220_20060210_v15_[026F6FE2].rom0"
			 
			 if [ -n "$bios_pcsx2" ]; then
				
				sed -i "s|$bios_pcsx2|$orig_bios_pcsx2|g" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"
				echo "BIOS entry inserted"
				
			else
				# usually a fresh ini file does not contain a BIOS line
				echo "$orig_bios_pcsx2" >> "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"
				echo "BIOS entry appended"
				
			fi
			
			echo "default bios entry SCPH-77001_USA_Con_0220_20060210_v15_[026F6FE2].rom0 was applied"
			
		fi
	fi

}


h_autosave_configs()
{

	# This section serves to backup existing configs when a user starts the install
	# Directory checks will likely be put in soon.
	# Old files, aka originals when ran, will be appended with ".old"

	# backup $home/.xbmc as a good precaution, even though we don't use this
	# dotfile anymore
	cp "$home/.xbmc" "$home/.xbmc.old" > /dev/null 2>&1

	clear
	# home dotfiles:
	# This section is not needed anymore since we not use out own dotfile

	# system configs:
	cp "/etc/init.d/xboxdrv" "/etc/init.d/xboxdrv.old" > /dev/null 2>&1
	cp "/etc/init.d/rescan" "/etc/init.d/rescan.old" > /dev/null 2>&1
	cp "/etc/modprobe.d/blacklist.conf" "/etc/modprobe.d/blacklist.conf.old" > /dev/null 2>&1
	cp "/usr/share/xsessions/xbmc.desktop" "/usr/share/xsessions/xbmc.desktop.old" > /dev/null 2>&1
	cp "/usr/bin/xbmc-session" "/usr/bin/xbmc-session.old" > /dev/null 2>&1
	cp "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf" "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf.old" > /dev/null 2>&1

	# correct permissions after tar archive is created
	h_correct_perms

}


h_restore_configs()
{

	# This section serves to restore existing configs when a user starts the install
	# Directory checks will likely be put in soon.
	# new files, aka new when installed, will be renamed without".old"

	# home dotfiles:
	# This section is not needed anymore since we not use out own dotfile

	# system configs:
	mv "/etc/xdg/autostart/xbmc.old" "/etc/xdg/autostart/xbmc" > /dev/null 2>&1
	mv "/etc/init.d/xboxdrv.old" "/etc/init.d/xboxdrv" > /dev/null 2>&1
	mv "/etc/modprobe.d/blacklist.conf.old" "/etc/modprobe.d/blacklist.conf" > /dev/null 2>&1
	mv "/usr/share/xsessions/xbmc.desktop.old" "/usr/share/xsessions/xbmc.desktop" > /dev/null 2>&1
	mv "/usr/bin/xbmc-session.old" "/usr/bin/xbmc-session" > /dev/null 2>&1
	mv "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf.old" "/usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf" > /dev/null 2>&1

	# correct permissions after tar archive is created
	h_correct_perms

	# inform user <- should the user be bothered each time?
	# dialog --msgbox "All existing .old configs restored sans .old" 5 48

}


function h_plugin_switcher()
{

cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Plugin Configuration Menu" 16 0 16)
options=(1 "Current configuration"
	 2 "Mupen64plus"
	 3 "Back to settings menu"  
	 4 "Back to main menu")

	#make menu choice
	selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	for choice in $selection
	do
		case $choice in

		1)
		#echo curent plugin settings
		#mupen64plus
		echo "Mupen64plus:" > res.txt
		grep -i "VideoPlugin = " "$config_home/.config/mupen64plus/mupen64plus.cfg" >> "$rootdir/logs/res.txt"
		echo "" >> "$rootdir/logs/res.txt"
		#Stella
		echo "Stella:" >> "$rootdir/logs/res.txt"
		grep -i "tia_filter" "$config_home/.stella/stellarc" >> "$rootdir/logs/res.txt"
		echo "" >> res.txt
		#report current resolution
		dialog --textbox res.txt 33 0
		#remove text file
		rm "$rootdir/logs/res.txt"	
		;;

		2)
		#cfg_mupen 	  	 	
		;;

		3)
		return 	  	 	
		;;

		4)
		_main 	 	
		;;
	esac
	done

}

function h_file_loader()
{

# based on what the user want to do, instruct them to select a folder of ROMs or a BIOS file (singular)
if [ "$loader_type" = "ROM" ]; then

	dialog --msgbox "Usage:\n\nChoose the *FOLDER*, not the file(s) you wish to load ROMs from. Esc or Cancel to abort\n\n
	(spacebar)                Select file\n
	(double-tap spacebar)     Enter new directory\n
	(Enter)                   Confirm selection\n
	(Arrow keys)              Navigate" 15 50

fi

if [ "$loader_type" = "BIOS" ]; then

	dialog --msgbox "Usage:\n\nChoose the *file*, not the folder(s) you wish to load BIOS files from. Esc or Cancel to abort\n\n
	(spacebar)                Select file\n
	(double-tap spacebar)     Enter new directory\n
	(Enter)                   Confirm selection\n
	(Arrow keys)              Navigate" 15 50
        
fi

	folder=$(dialog --stdout --cr-wrap --title "Please choose a file" --fselect "$home/" 14 48)

	response=$?
        case $response in
           0)
           #echo $folder
           #sleep 3s
           #continue on to next function
           ;;

           1)
           dialog --infobox "Cancelled..."  3 16
           sleep 2s
           # set folder to blank
           folder=""
           ;;

           255)
           dialog --infobox "Esc hit..." 3 14
           folder=""
           sleep 2s

	esac

	# debugging only
	# echo "${folder} file chosen." >> "$rootdir/logs/debug.log"

	clear
}

function h_rom_loader()
{

loader_type="ROM"

while true; do
cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Load ROMs for which system?" 20 32 24)
options=(1 "Atari 2600"
	 2 "Atari Lynx" 
	 3 "NES" 
	 4 "SNES" 
	 5 "Nintendo 64"
	 6 "Nintendo DS"
	 7 "MAME"
	 8 "Sega Master System"
	 9 "Sega Game Gear"
	 10 "Sega Genesis"
	 11 "Sega CD"
	 12 "Sega 32X"
	 13 "Nintendo GBA"
	 14 "Nintendo GBC"
	 15 "TurboGraphx 16"
	 16 "Neo-Geo CDZ"
	 17 "Neo-Geo AES"
	 18 "Sony PSP"
	 19 "Sony PSX/PS1"
	 20 "Sony PS2"
	 21 "Exit ROM Loader")

	#make menu choice
	choices=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions

	if [ "$choices" != "" ]; then
	    case $choices in

		1)
		#call file loader  	
		h_file_loader
		#copy Atari ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Atari 2600"
		fi
		;;

		2)
		#call file loader
		h_file_loader
		#copy Atari Lynx ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Atari Lynx/"
		fi
		;;

		3)
		#call file loader  	
		h_file_loader
		#copy NES ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/NES/"
		fi
		;;

		4)
		#call file loader  	
		h_file_loader
		#copy SNES ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/SNES/"
		fi
		;;

		5)
		#call file loader  	
		h_file_loader
		#copy N64 ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Nintendo 64/"
		fi
		;;

		6)
		#call file loader  	
		h_file_loader
		#copy DS ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Nintendo DS/"
		fi
		;;

		7)
		#call file loader  	
		h_file_loader
		#copy MAME ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/MAME/"
		fi
		;;

		8)
		#call file loader  	
		h_file_loader
		#copy Sega Master System ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega Master System/"
		fi
		;;

		9)
		#call file loader  	
		h_file_loader
		#copy Sega Game Gear ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega Game Gear/"
		fi
		;;

		10)
		#call file loader  	
		h_file-loader
		#copy Sega Genesis ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/Sega Genesis/"
		fi
		;;

		11)
		#call file loader  	
		h_file_loader
		#copy Sega CD ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega CD/"
		fi
		;;

		12)  
		#call file loader  	
		h_file_loader
		#copy Sega 32X ROMs
		if [ -n "$folder" ]; then
			cp -R "$folder"/* "$rootdir/ROMs/Sega 32X/"
		fi
		;;

		13)  
		#call file loader  	
		h_file_loader
		#copy GBC ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/GBA/"
		fi
		;;

		14)  
		#call file loader  	
		h_file_loader
		#copy GBC ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/GBC/"
		fi
		;;

		15)  
		#call file loader  	
		h_file_loader
		#copy Turbographx 16 ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/TurboGraphx 16/"
		fi
		;;

		16)  
		#call file loader  	
		h_file_loader
		#copy Neo Geo CDZ ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/Neo Geo/CDZ/"
		fi
		;;

		17)  
		#call file loader  	
		h_file_loader
		#copy Neo Geo AES ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/Neo Geo/AES/"
		fi
		;;

		18)  
		#call file loader  	
		h_file_loader
		#copy PSP ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/PSP/"
		fi
		;;

		19)  
		#call file loader  	
		h_file_loader
		#copy PS1/PSX ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/PS1/"
		fi
		;;

		20)  
		#call file loader  	
		h_file_loader
		#copy PS2 ROMs
		if [ -n "$folder" ]; then
			cp -Rv "$folder"/* "$rootdir/ROMs/PS2/"
		fi
		;;

		21)  
		return
		;;

		255)  
           	dialog --infobox "Esc hit..." 3 14
           	sleep 1s
		;;

		esac
	else
		break
	fi
done

	# correct permissions
	h_correct_perms
}

function h_res_switcher()
{
	dialog --infobox "Setting resolution to selection" 3 36
	#resolution is set via _resolution function		
	
	#############################################################		
	# Stella (deprecated)
	# OpenGL handles this now, 'fullres' no longer exists
	############################################################
	
	# "fullres =" DOES NOT SEEM TO BE USED NOW IN THE SOURCE COMPILED VERSION
	# IT WILL BE LEFT ALONE FOR NOW UNTIL DEEMED UNECESSARY
	# st_org=$(grep -Ee "\bfullres = \b" "$config_home/.stella/stellarc")
	# make the changes, prefix new_X in case NULL was entered previously
	# sed -i "s|$st_org|fullres = $st_new|g" "$config_home/.stella/stellarc"

	########################		
	#mupen64plus
	########################
	m_org_X=$(grep -Ee "\bScreenWidth = \b" "$config_home/.config/mupen64plus/mupen64plus.cfg")
	m_org_Y=$(grep -Ee "\bScreenHeight = \b" "$config_home/.config/mupen64plus/mupen64plus.cfg")
	#make the changes, prefix new_X in case NULL was entered previousey
	sed -i "s|$m_org_X|ScreenWidth = $m_new_X|g" "$config_home/.config/mupen64plus/mupen64plus.cfg"
	sed -i "s|$m_org_Y|ScreenHeight = $m_new_Y|g" "$config_home/.config/mupen64plus/mupen64plus.cfg"

	########################		
	#mednafen 
	######################## 

	#Emulator Codes:
	########################
	#Atari Lynx [lynx]
	#GameBoy (Color) [gb]
	#GameBoy Advance [gba]
	#Neo Geo Pocket (Color) [ngp]
	#Nintendo Entertainment System/Famicom [nes]
	#PC Engine (CD)/TurboGrafx 16 (CD)/SuperGrafx [pce]
	#PC Engine (CD)/TurboGrafx 16 (CD)/SuperGrafx [pce_fast]
	#PC-FX [pcfx]
	#Sega Game Gear [gg]
	#Sega Genesis/MegaDrive [md]
	#Sega Master System [sms]
	#Sony PlayStation [psx]
	#Super Nintendo Entertainment System/Super Famicom [snes]
	#Virtual Boy [vb]
	#WonderSwan [wswan]

	#Note: it should be noted that all emulators are set to aspect ratios
	#the screen (EMU_CODE.aspect. See the wiki for more

	#Mednafen (GBC)
	gb_org_X=$(grep -Ee "\bgb.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gb_org_Y=$(grep -Ee "\bgb.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gb_org_X|gb.xres $gb_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gb_org_Y|gb.yres $gb_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (NES)
	nes_org_X=$(grep -Ee "\bnes.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	nes_org_Y=$(grep -Ee "\bnes.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$nes_org_X|nes.xres $nes_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$nes_org_Y|nes.yres $nes_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (GameBoy Advance)
	gba_org_X=$(grep -Ee "\bgba.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gba_org_Y=$(grep -Ee "\bgba.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gba_org_X|gba.xres $gba_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gba_org_Y|gba.yres $gba_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (SNES)
	snes_org_X=$(grep -Ee "\bsnes.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	snes_org_Y=$(grep -Ee "\bsnes.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$snes_org_X|snes.xres $snes_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$snes_org_Y|snes.yres $snes_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Sega Master System, aka Sega Sega Master)
	sms_org_X=$(grep -Ee "\bsms.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	sms_org_Y=$(grep -Ee "\bsms.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$sms_org_X|sms.xres $sms_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$sms_org_Y|sms.yres $sms_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Sega Game Gear)
	gg_org_X=$(grep -Ee "\bgg.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	gg_org_Y=$(grep -Ee "\bgg.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gg_org_X|gg.xres $gg_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gg_org_Y|gg.yres $gg_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (Turbographx 16)
	pce_org_X=$(grep -Ee "\bpce.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	pce_org_Y=$(grep -Ee "\bpce.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$pce_org_X|pce.xres $pce_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$pce_org_Y|pce.yres $pce_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	#Mednafen (PSX)
	psx_org_X=$(grep -Ee "\bpsx.xres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	psx_org_Y=$(grep -Ee "\bpsx.yres\b " "$config_home/.mednafen/mednafen-09x.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$psx_org_X|psx.xres $psx_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$psx_org_Y|psx.yres $psx_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	# Gens GS (Sega CD)
	gens_org_X=$(grep -Ee "\bOpenGL Width=\b" "/home/test/.retrorig/.gens/gens.cfg")
	gens_org_Y=$(grep -Ee "\bOpenGL Height=\b" "/home/test/.retrorig/.gens/gens.cfg")
	#make the changes, prefix new_X in case NULL was entered previously
	sed -i "s|$gens_org_X|OpenGL Width= $gens_new_X|g" "$config_home/.mednafen/mednafen-09x.cfg"
	sed -i "s|$gens_org_Y|OpenGL Height= $gens_new_Y|g" "$config_home/.mednafen/mednafen-09x.cfg"

	########################		
	# pcsx2
	########################
	ps2_org_X=$(grep -Ee "\bresx = \b" "$config_home/.config/pcsx2/inis/GSdx.ini")
	ps2_org_Y=$(grep -Ee "\bresy = \b" "$config_home/.config/pcsx2/inis/GSdx.ini")
	#make the changes, prefix new_X in case NULL was entered previousey
	sed -i "s|$ps2_org_X|resx = $ps2_new_X|g" "$config_home/.config/pcsx2/inis/GSdx.ini"
	sed -i "s|$ps2_org_Y|resy = $ps2_new_Y|g" "$config_home/.config/pcsx2/inis/GSdx.ini"

	# correct permissions
	h_correct_perms
}


function h_bios_checker()
{
	clear
	# BIOS file checks
	echo "######################################"
	echo "BIOS/romset Checker Utility"	
	echo "######################################"
	echo ""
	echo "Checking for Bios files (if applicable)..."
	echo ""
	sleep 3s


	echo "######################################"
	echo "MESS romset"	
	echo "######################################"
	# MESS -g BIOS files
	h_filechecker "$rootdir/ROMs/BIOS/MESS" 
	# output something to user, so they don't necessarily have to check the debug log
	echo "MESS BIOS directory contains: "
	ls "$rootdir/BIOS/MESS"
	echo ""
	# If MESS is loaded already, verify BIOS files
	/usr/games/mess neocdz -verifyroms


	echo "######################################"
	echo "MAME romset"	
	echo "######################################"

	# output something to user, so they don't necessarily have to check the debug log
	echo "This will take a long time, please wait..."
	echo "MAME BIOS directory contains: "
	ls "$rootdir/BIOS/MAME"
	echo ""
	# Verify mame rom sets
	# Let user know this takes a lot of time...
	/usr/games/mame -verifyroms

	#hold for review
	sleep 5s

}

function h_bios_loader()
{
	
# present menu
loader_type="BIOS"

while true; do
cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Load BIOS files for which system?" 19 32 24)
options=(1 "Atari Lynx"
	 2 "Neo-Geo AES/CDZ"
	 3 "MAME" 
	 4 "PSX/PS1"
	 5 "PS2"
	 6 "Sega CD"    
	 7 "Exit BIOS Loader")

	#make menu choice
	selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
	#functions


	if [ "$selection" != "" ]; then
		case $selection in

		1)
		#call file loader
		h_file_loader
		# copy Atari Lynx BIOS file over to Mednafen (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/Mednafen/"
		fi
		;;

		2)
		# call file loader  	
		h_file_loader
		# copy Neo-Geo BIOS file over to MESS (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/MESS/"
		fi
		;;

		3)
		#call file loader
		h_file_loader
		# copy MAME BIOS file over to MESS (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/MAME/"
		fi
		;;

		4)
		#call file loader
		h_file_loader
		# copy PSX BIOS file over to Mednafen (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/Mednafen/"
		fi
		;;

		5)
		#call file loader
		h_file_loader
		# copy PS2 BIOS file over to PCSX2 (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/PCSX2/"
			# assess current BIOS file
			old_ps2_bios=$(grep -e "BIOS=" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini")
			# use sed to replace the defined BIOS file
			# perform actual changes
			sed -i "s|$old_ps2_bios|BIOS=$folder|g" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"			
		fi
		;;

		6)
		# call file loader
		h_file_loader
		# copy Sega CD BIOS file over to KEGA Fusion (root emulator)
		if [ -n "$folder" ]; then
			cp -v "$folder" "$rootdir/BIOS/Gens/"

			###############################################
			# Determine which Region from user via menu
			###############################################

			cmd=(dialog --backtitle "LibreGeek.org RetroRig Installer" --menu "Load BIOS files for which system?" 19 32 24)
				options=(1 "USA"
					 2 "Japan"
					 3 "Europe"  
	 				 4 "Return to Previous")

			#make menu choice
			selection=$("${cmd[@]}" "${options[@]}" 2>&1 >/dev/tty)
			#functions

			for choice in $selection
			do
				case $choice in

				1)
				# assess current BIOS file
				old_scd_bios=$(grep -e "USA CD BIOS=" "$config_home/.gens/gens.cfg")
				# use sed to replace the defined BIOS file
				# perform actual changes
				sed -i "s|$old_scd_bios|USA CD BIOS=$folder|g" "$config_home/.gens/gens.cfg"	
				;;

				2)
				# assess current BIOS file
				old_scd_bios=$(grep -e "Japan CD BIOS=" "$config_home/.gens/gens.cfg")
				# use sed to replace the defined BIOS file
				# perform actual changes
				sed -i "s|$old_scd_bios|Japan CD BIOS=$folder|g" "$config_home/.gens/gens.cfg"
				;;

				3)
				# assess current BIOS file
				old_scd_bios=$(grep -e "Europe CD BIOS=" "$config_home/.gens/gens.cfg")
				# use sed to replace the defined BIOS file
				# perform actual changes
				sed -i "s|$old_scd_bios|Europe CD BIOS=$folder|g" "$config_home/.gens/gens.cfg"
				;;

				4)
				return
				;;

				esac
			done		
		fi

			###############################################
			# End Sega CD BIOS routine
			###############################################
		;;

		7)
		return
		;;

		esac
	else
		break
	fi
done
	
	#fix persmissions, post-copy
	h_correct_perms

}

function h_correct_perms()
{

	# inform user of permissions corrections
	clear
	echo "Correcting permissions on folders due to use of sudo."
	echo "Please wait..."

	# Root folder
	chgrp -Rv "$user" "$rootdir" > /dev/null 2>&1
	chown -Rv "$user" "$rootdir" > /dev/null 2>&1

	# Config folder
	chgrp -Rv "$user" "$config_home" > /dev/null 2>&1
	chown -Rv "$user" "$config_home" > /dev/null 2>&1

	# correct the desktop permissions so we can add our own launcher
	# This will allow permissions change for all languages. Thanks JC!
	chmod -Rv 755 $xdg_desktop_dir > /dev/null 2>&1
	chown -Rv $user $xdg_desktop_dir > /dev/null 2>&1
	chgrp -Rv $user $xdg_desktop_dir > /dev/null 2>&1

	# replace "test" username in config files here to ensure games
	# and emulators function and start properly

	# xbmc dotfile (our custom path)
	chgrp -Rv "$user" "$xbmc_home" > /dev/null 2>&1
	chown -Rv "$user" "$xbmc_home" > /dev/null 2>&1

	# XBMC gamepad auto-detect helper
	chmod ugo+x "/usr/share/applications/gp_autodetect_xbmc.sh" > /dev/null 2>&1

	# start script for RetroRig application
	chmod ugo+x "/usr/share/applications/startXBMC.sh" > /dev/null 2>&1

	# RetroRig autostart file
	chgrp -Rv "$user" "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1
	chown -Rv "$user" "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1
	chmod ugo+x "$home/.config/autostart/RetroRig.desktop" > /dev/null 2>&1

	# correct our own start file for retrorig
	if [ -f /usr/bin/xbmc-retrorig ]; then
		chmod ugo+x /usr/bin/xbmc-retrorig
	fi

	# xboxdrv init script
	chmod 755 $xboxdrv_init > /dev/null 2>&1
	chmod 755 $xboxdrv_defaults > /dev/null 2>&1
}

function h_emu_user_fixes()
{

	# set the system user to an absolute value for files that require it
	# RCB and some config files don't like using $config_home, rather /home/test/
	# Let's change the config files to reflect the current username
	
	# EmulationStation
	sed -i "s|installdir_temp|$rootdir|g" "$es_home/es_systems.cfg"
	sed -i "s|config_temp|$config_home|g" "$es_home/es_systems.cfg"

	# mame
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.mame/mame.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.mame/mame.ini"
	
	# MESS
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.mess/mess.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.mess/mess.ini"
	
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.mess/aes.ini" | tee >> "$rootdir/logs/debug.log"
	sed -i "s|config_temp|$config_home|g" "$config_home/.mess/aes.ini" | tee >> "$rootdir/logs/debug.log"

	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.mess/neocdz.ini" | tee >> "$rootdir/logs/debug.log"
	sed -i "s|config_temp|$config_home|g" "$config_home/.mess/neocdz.ini" | tee >> "$rootdir/logs/debug.log"
	
	# PPSSPP	
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.config/ppsspp/PSP/SYSTEM/ppsspp.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.config/ppsspp/PSP/SYSTEM/ppsspp.ini"

	# Mednafen firmware location
	sed -i "s|firmware_temp|$rootdir/BIOS/Mednafen|g" "$config_home/.mednafen/mednafen-09x.cfg"

	# Dolphin directories
	## GC ##
	sed -i "s|home_temp|$home|g" "$config_home/.dolphin-emu/GC/Config/Dolphin.ini"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.dolphin-emu/GC/Config/Dolphin.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/GC/Config/Dolphin.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/GC/Config/GCPadNew.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/GC/Config/WiimoteNew.ini"
	## Wii ##
	sed -i "s|home_temp|$home|g" "$config_home/.dolphin-emu/Wii/Config/Dolphin.ini"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.dolphin-emu/Wii/Config/Dolphin.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/Wii/Config/Dolphin.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/Wii/Config/GCPadNew.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.dolphin-emu/Wii/Config/WiimoteNew.ini"

	# Stella
	sed -i "s|config_temp|$config_home|g" "$config_home/.stella/stellarc"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.stella/stellarc"

	# PCSX2
	sed -i "s|config_temp|$config_home|g" "$config_home/.config/pcsx2/PCSX2-reg.ini"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"
	sed -i "s|config_temp|$config_home|g" "$config_home/.config/pcsx2/inis/PCSX2_ui.ini"

	# Gens GS (Sega CD)
	sed -i "s|config_temp|$config_home|g" "$config_home/.gens/gens.cfg"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.gens/gens.cfg"
	
	# Mupen64Plus
	sed -i "s|PLACEHOLDER_SAVESTATEPTH|$config_home/.config/mupen64plus/save|g" "$config_home/.config/mupen64plus/mupen64plus.cfg"	

	# Retroarch
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.config/retroarch/retroarch.cfg"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.config/retroarch/desmume_libretro.cfg"
	sed -i "s|installdir_temp|$rootdir|g" "$config_home/.config/retroarch/stella_libretro.cfg"

	# echo change
	echo "The user applied to configuration files was: $user" | tee >> "$rootdir/logs/debug.log"

}

function h_filechecker()
{
    if [[ -e "$1" ]]; then
        ls -lh "$1" | tee >> "$rootdir/logs/debug.log"
    else
        echo "$1 does not exist!" | tee >> "$rootdir/logs/debug.log"
    fi
}

function h_pkgcheck()
{
    PKG_OK=$($cmd_query_pkg "$1" | egrep -w "Status|Package|Version")
    echo "Checking for some pkg/lib: $PKG_OK"
    if [ "" == "$PKG_OK" ]; then
        echo "NOT INSTALLED: $1"
    else
        echo "installed: $1"
    fi
}

function h_update_git() 
{

	echo "Fetching latest version of the RetroRig Setup Script."
	pushd "$rootdir"

	if [[ ! -d ".git" ]]; then
		dialog --backtitle "LibreGeek.org - RetroRig Setup." --msgbox "Cannot find direcotry 	'.git'. Please clone the RetroRig setup script via \
		'git clone https://github.com/ProfessorKaos64/RetroRig'" 20 60
		popd
		return
	fi
	git pull
	#pause for quick review
	sleep 3s
	popd

	dialog --backtitle "LibreGeek.org - RetroRig Setup." --msgbox "Fetched the latest version of the RetroRig repository. Please exit and restart the script." 7 60 

}


function h_upgrade_system() 
{

	clear
	# Upgrade system pkgs, but do so intelligently
	$cmd_update_system
	$cmd_upgrade_system
	sleep 3s
	clear

}

h_kernel_check()
{

	# The 3.14 manual kernel upgrade for Ubuntu systems is no longer necessary
	# This is confirmed to be fixed since linux: 3.13.0-38.65
	# Confirmed to be fine in current 3.13.0-37-generic.
	# Please see commit efeb2bd for legacy code. This message will be 
	# Removed in due time. 

	# It may be a good idea to keep the detection code back in here
	# in case we actually need to use it for reference:


	##################################################################
	# related documentation as to why this kernel upgrade is done:
	#
	# hid-sony kernel module regression (now fixed):
	# https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1326725
	#
	# PPA Page:
	# http://kernel.ubuntu.com/~kernel-ppa/mainline/v3.14-trusty/
	#
	# WARNING:
	# Canonical does not recommend updating your Linux kernel to other
	# versions other than the ones provided on official channels. This
	# is not a totally safe procedure and you might have problems
	# afterwards, even system failures or applications not working
	# properly. On the other hand, you might get better performance
	# from your system.
	#
	##################################################################

	clear
	# alternatively: a=$(uname -r); user_kernel=${a//[^0-9]}
	# Get user's current kernel. We only need the 3.14.0 digits
	# The rest can be different between kernels and is not needed
	# To determine if we are on 3.14.x / 3.14.x.000000
	user_kernel=$(uname -r | awk -F'[^0-9]*' '{print $1$2$3}')
	echo "user's kernel is: $user_kernel"
	sleep 2s

	target_kernel="3140"
	echo "Target kernel is: $target_kernel"
	sleep 2s

	# Check if 3.14.x exists
	if [ $user_kernel -lt "$target_kernel" ]; then
		echo "Kernel 3.14.x not found, installing"
		sleep 5s
		wget --tries=50 -P /tmp $linux_headers_deb
		wget --tries=50 -P /tmp $linux_headers
		wget --tries=50 -P /tmp $linux_image
		cd /tmp

		$cmd_manual_pkg_install $linux_headers_deb
		$cmd_manual_pkg_install $linux_headers
		$cmd_manual_pkg_install $linux_image

		# Hold the kernel packages so the kernel is not upgrade by accident
		# Commented out for testing some errors with an old mednafen pkg
		#sudo aptitude hold linux-image-`uname -r`
		# inform user of what was done

		dialog --msgbox "Upgrading the kernel to 3.14.0-031400-generic is complete. The packages 'linux-generic linux-headers-generic linux-image-generic' have been held to avoid falling back to a regressed kernel (sony-hid). If you wish to change your kernel, please run the following command in the terminal:\n\n'sudo apt-mark unhold linux-generic linux-headers-generic linux-image-generic'" 14 60
		# cleanup packages
		rm -f /tmp/linux-headers-3.14*
		rm -f /tmp/linux-image-3.14*
		echo "true" > "$scriptdir/logs/kernelUpdate"

	elif [ $user_kernel -ge "$target_kernel" ]; then
		# Do nothing
		echo "Kernel 3.14.x or greater found, exiting"
		sleep 2s
		echo "false" > "$scriptdir/logs/kernelUpdate"
	fi

}
